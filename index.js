// Generated by CoffeeScript 2.3.2
var DatetimeDistanceInWords;

import {
  addDays,
  subDays,
  isToday,
  isTomorrow,
  isYesterday,
  startOfDay,
  endOfDay,
  isThisWeek,
  startOfWeek,
  endOfWeek,
  isThisMonth,
  startOfMonth,
  endOfMonth,
  isThisYear,
  startOfYear,
  endOfYear,
  areRangesOverlapping,
  isWithinRange,
  isFuture,
  isPast,
  isWeekend,
  isSaturday,
  compareAsc,
  getDay,
  setDay
} from 'date-fns';

export default DatetimeDistanceInWords = class DatetimeDistanceInWords {
  constructor(dtstart, dtend, queries) {
    this.dtstart = dtstart;
    this.dtend = dtend;
    this.queries = queries;
  }

  value() {
    var i, len, query, ref, result;
    ref = this.queries;
    for (i = 0, len = ref.length; i < len; i++) {
      query = ref[i];
      if (result = this.processQuery(query)) {
        if (typeof query === 'function') {
          return result;
        } else {
          return query;
        }
        break;
      }
    }
  }

  processQuery(query) {
    switch (query) {
      case 'now':
      case 'today':
        return this.todayQuery();
      case 'tomorrow':
        return this.tomorrowQuery();
      case 'yesterday':
        return this.yesterdayQuery();
      case 'this-week':
        return this.thisWeekQuery();
      case 'next-week':
        return this.nextWeekQuery();
      case 'past-week':
        return this.pastWeekQuery();
      case 'this-month':
        return this.thisMonthQuery();
      case 'next-month':
        return this.nextMonthQuery();
      case 'past-month':
        return this.pastMonthQuery();
      case 'this-year':
        return this.thisYearQuery();
      case 'next-year':
        return this.nextYearQuery();
      case 'past-year':
        return this.pastYearQuery();
      case 'next':
        return this.nextQuery();
      case 'past':
        return this.pastQuery();
      case 'nearest-weekend':
        return this.nearestWeekendQuery();
      default:
        if (typeof query === 'function') {
          return query(this.dtstart, this.dtend);
        }
    }
  }

  todayQuery() {
    var now;
    if (!this.dtend) {
      return isToday(this.dtstart);
    }
    now = new Date();
    return isWithinRange(now, this.dtstart, this.dtend);
  }

  tomorrowQuery() {
    var tomorrow;
    if (!this.dtend) {
      return isTomorrow(this.dtstart);
    }
    tomorrow = addDays(new Date(), 1);
    return isWithinRange(tomorrow, this.dtstart, this.dtend);
  }

  yesterdayQuery() {
    var yesterday;
    if (!this.dtend) {
      return isYesterday(this.dtstart);
    }
    yesterday = subDays(new Date(), 1);
    return isWithinRange(yesterday, this.dtstart, this.dtend);
  }

  thisWeekQuery() {
    var now;
    if (!this.dtend) {
      return isThisWeek(this.dtstart);
    }
    now = new Date();
    return areRangesOverlapping(startOfWeek(now), endOfWeek(now), this.dtstart, this.dtend);
  }

  nextWeekQuery() {
    var endOfNextWeek, now, startOfNextWeek;
    now = new Date();
    startOfNextWeek = addDays(endOfWeek(now), 1);
    endOfNextWeek = endOfWeek(startOfNextWeek);
    if (!this.dtend) {
      return isWithinRange(this.dtstart, startOfNextWeek, endOfNextWeek);
    }
    return areRangesOverlapping(startOfNextWeek, endOfNextWeek, this.dtstart, this.dtend);
  }

  pastWeekQuery() {
    var endOfPastWeek, now, startOfPastWeek;
    now = new Date();
    endOfPastWeek = subDays(startOfWeek(now), 1);
    startOfPastWeek = startOfWeek(endOfPastWeek);
    if (!this.dtend) {
      return isWithinRange(this.dtstart, startOfPastWeek, endOfPastWeek);
    }
    return areRangesOverlapping(startOfPastWeek, endOfPastWeek, this.dtstart, this.dtend);
  }

  thisMonthQuery() {
    var now;
    if (!this.dtend) {
      return isThisMonth(this.dtstart);
    }
    now = new Date();
    return areRangesOverlapping(startOfMonth(now), endOfMonth(now), this.dtstart, this.dtend);
  }

  nextMonthQuery() {
    var endOfNextMonth, now, startOfNextMonth;
    now = new Date();
    startOfNextMonth = addDays(endOfMonth(now), 1);
    endOfNextMonth = endOfMonth(startOfNextMonth);
    if (!this.dtend) {
      return isWithinRange(this.dtstart, startOfNextMonth, endOfNextMonth);
    }
    return areRangesOverlapping(startOfNextMonth, endOfNextMonth, this.dtstart, this.dtend);
  }

  pastMonthQuery() {
    var endOfPastMonth, now, startOfPastMonth;
    now = new Date();
    endOfPastMonth = subDays(startOfMonth(now), 1);
    startOfPastMonth = startOfMonth(endOfPastMonth);
    if (!this.dtend) {
      return isWithinRange(this.dtstart, startOfPastMonth, endOfPastMonth);
    }
    return areRangesOverlapping(startOfPastMonth, endOfPastMonth, this.dtstart, this.dtend);
  }

  thisYearQuery() {
    var now;
    if (!this.dtend) {
      return isThisYear(this.dtstart);
    }
    now = new Date();
    return areRangesOverlapping(startOfYear(now), endOfYear(now), this.dtstart, this.dtend);
  }

  nextYearQuery() {
    var endOfNextYear, now, startOfNextYear;
    now = new Date();
    startOfNextYear = addDays(endOfYear(now), 1);
    endOfNextYear = endOfYear(startOfNextYear);
    if (!this.dtend) {
      return isWithinRange(this.dtstart, startOfNextYear, endOfNextYear);
    }
    return areRangesOverlapping(startOfNextYear, endOfNextYear, this.dtstart, this.dtend);
  }

  pastYearQuery() {
    var endOfPastYear, now, startOfPastYear;
    now = new Date();
    endOfPastYear = subDays(startOfYear(now), 1);
    startOfPastYear = startOfYear(endOfPastYear);
    if (!this.dtend) {
      return isWithinRange(this.dtstart, startOfPastYear, endOfPastYear);
    }
    return areRangesOverlapping(startOfPastYear, endOfPastYear, this.dtstart, this.dtend);
  }

  nextQuery() {
    return isFuture(startOfDay(this.dtstart));
  }

  pastQuery() {
    if (!this.dtend) {
      return isPast(endOfDay(this.dtstart));
    }
    return isPast(endOfDay(this.dtend));
  }

  nearestWeekendQuery() {
    var day, endOfNearestWeekend, now, startOfNearestWeekend;
    now = new Date();
    day = getDay(now);
    startOfNearestWeekend = startOfDay(day === 6 || day === 0 ? now : setDay(now, 6));
    endOfNearestWeekend = endOfDay(addDays(startOfNearestWeekend, 1));
    if (!this.dtend) {
      return isWithinRange(this.dtstart, startOfNearestWeekend, endOfNearestWeekend);
    }
    return areRangesOverlapping(startOfNearestWeekend, endOfNearestWeekend, this.dtstart, this.dtend);
  }

};
